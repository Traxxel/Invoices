// <auto-generated />
using System;
using Invoice.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Invoice.Infrastructure.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    partial class InvoiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Invoice.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<float>("ExtractionConfidence")
                        .HasColumnType("real")
                        .HasComment("ML extraction confidence (0.0-1.0)");

                    b.Property<decimal>("GrossTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Gross total amount");

                    b.Property<DateTime>("ImportedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Import timestamp");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasComment("Invoice date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Unique invoice number");

                    b.Property<string>("IssuerCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Issuer city");

                    b.Property<string>("IssuerCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Issuer country");

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Name of the invoice issuer");

                    b.Property<string>("IssuerPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Issuer postal code");

                    b.Property<string>("IssuerStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Issuer street address");

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("ML model version used for extraction");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Net total amount");

                    b.Property<string>("SourceFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Path to source PDF file");

                    b.Property<decimal>("VatTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("VAT total amount");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionConfidence")
                        .HasDatabaseName("IX_Invoices_ExtractionConfidence");

                    b.HasIndex("ImportedAt")
                        .HasDatabaseName("IX_Invoices_ImportedAt");

                    b.HasIndex("InvoiceDate")
                        .HasDatabaseName("IX_Invoices_InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Invoices_InvoiceNumber_Unique");

                    b.HasIndex("IssuerName")
                        .HasDatabaseName("IX_Invoices_IssuerName");

                    b.HasIndex("ModelVersion")
                        .HasDatabaseName("IX_Invoices_ModelVersion");

                    b.HasIndex("GrossTotal", "InvoiceDate")
                        .HasDatabaseName("IX_Invoices_Amount_Date");

                    b.HasIndex("InvoiceDate", "IssuerName")
                        .HasDatabaseName("IX_Invoices_Date_Issuer");

                    b.ToTable("Invoices", null, t =>
                        {
                            t.HasCheckConstraint("CK_Invoices_Amount_Consistency", "ABS((NetTotal + VatTotal) - GrossTotal) <= 0.02");

                            t.HasCheckConstraint("CK_Invoices_Confidence_Range", "ExtractionConfidence >= 0.0 AND ExtractionConfidence <= 1.0");

                            t.HasCheckConstraint("CK_Invoices_GrossTotal_Positive", "GrossTotal >= 0");

                            t.HasCheckConstraint("CK_Invoices_NetTotal_Positive", "NetTotal >= 0");

                            t.HasCheckConstraint("CK_Invoices_VatTotal_Positive", "VatTotal >= 0");
                        });
                });

            modelBuilder.Entity("Invoice.Domain.Entities.InvoiceRawBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ActualLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Manually assigned label");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Creation timestamp");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasComment("Height of bounding box");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to Invoice");

                    b.Property<int>("LineIndex")
                        .HasColumnType("int")
                        .HasComment("Line index within page");

                    b.Property<int>("Page")
                        .HasColumnType("int")
                        .HasComment("Page number in PDF");

                    b.Property<string>("PredictedLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("ML predicted label");

                    b.Property<float?>("PredictionConfidence")
                        .HasColumnType("real")
                        .HasComment("ML prediction confidence");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("Extracted text content");

                    b.Property<float>("Width")
                        .HasColumnType("real")
                        .HasComment("Width of bounding box");

                    b.Property<float>("X")
                        .HasColumnType("real")
                        .HasComment("X coordinate of bounding box");

                    b.Property<float>("Y")
                        .HasColumnType("real")
                        .HasComment("Y coordinate of bounding box");

                    b.HasKey("Id");

                    b.HasIndex("ActualLabel")
                        .HasDatabaseName("IX_InvoiceRawBlocks_ActualLabel");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_InvoiceRawBlocks_CreatedAt");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_InvoiceRawBlocks_InvoiceId");

                    b.HasIndex("Page")
                        .HasDatabaseName("IX_InvoiceRawBlocks_Page");

                    b.HasIndex("PredictedLabel")
                        .HasDatabaseName("IX_InvoiceRawBlocks_PredictedLabel");

                    b.HasIndex("PredictionConfidence")
                        .HasDatabaseName("IX_InvoiceRawBlocks_PredictionConfidence");

                    b.HasIndex("ActualLabel", "PredictedLabel")
                        .HasDatabaseName("IX_InvoiceRawBlocks_Actual_Predicted");

                    b.HasIndex("InvoiceId", "LineIndex")
                        .HasDatabaseName("IX_InvoiceRawBlocks_Invoice_LineIndex");

                    b.HasIndex("InvoiceId", "Page")
                        .HasDatabaseName("IX_InvoiceRawBlocks_Invoice_Page");

                    b.HasIndex("PredictedLabel", "PredictionConfidence")
                        .HasDatabaseName("IX_InvoiceRawBlocks_Label_Confidence");

                    b.ToTable("InvoiceRawBlocks", null, t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceRawBlocks_Confidence_Range", "PredictionConfidence IS NULL OR (PredictionConfidence >= 0.0 AND PredictionConfidence <= 1.0)");

                            t.HasCheckConstraint("CK_InvoiceRawBlocks_Height_Positive", "Height > 0");

                            t.HasCheckConstraint("CK_InvoiceRawBlocks_LineIndex_Positive", "LineIndex >= 0");

                            t.HasCheckConstraint("CK_InvoiceRawBlocks_Page_Positive", "Page > 0");

                            t.HasCheckConstraint("CK_InvoiceRawBlocks_Width_Positive", "Width > 0");
                        });
                });

            modelBuilder.Entity("Invoice.Domain.Entities.InvoiceRawBlock", b =>
                {
                    b.HasOne("Invoice.Domain.Entities.Invoice", "Invoice")
                        .WithMany("RawBlocks")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Invoice.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("RawBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
